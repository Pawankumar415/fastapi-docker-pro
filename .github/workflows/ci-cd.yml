name: Docker Build and Push CI/CD

on:
  push:
    branches:
      - main

jobs:
  # âœ… Job 1 â€“ Build & Push Image to Docker Hub (CI)
  build_and_push_image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file from GitHub Secrets (CI)
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/fastapi-app:latest
            ${{ secrets.DOCKER_USERNAME }}/fastapi-app:${{ github.sha }}

      - name: Confirm Build and Push
        run: echo "âœ… Docker image successfully built and pushed!"

  # âœ… Job 2 â€“ Deploy locally on self-hosted runner (CD)
  deploy_to_local:
    runs-on: self-hosted
    needs: [build_and_push_image]

    # âœ… Important: Make sure all commands run in correct folder even if it has spaces
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
      - name: Checkout code (on self-hosted runner)
        uses: actions/checkout@v4

      - name: Debug - Show working directory
        run: |
          echo "Current directory: $(pwd)"
          echo "Workspace: $GITHUB_WORKSPACE"

      - name: Create runtime .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "âœ… .env created at $(pwd)"

      - name: Pull and Recreate Containers
        run: |
          echo "ðŸš€ Pulling latest images and deploying..."
          docker-compose pull
          docker-compose up -d --force-recreate

      - name: Deployment Confirmed
        run: echo "ðŸŽ‰ Deployment successful! Latest container is running."

